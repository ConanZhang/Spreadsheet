// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace GUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Add - Use 'AddParams' to pass parameters into this method.
        /// </summary>
        public void Add()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIexeShoListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIexeShoListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uIContentsBoxEdit = this.UIForm1Window.UIContentsBoxWindow.UIContentsBoxEdit;
            WinClient uISpreadsheetPanelClient = this.UIForm1Window.UIItemWindow.UISpreadsheetPanelClient;
            #endregion

            // Click 'SpreadsheetGUI.exe - Shortcut' list item
            Mouse.Click(uISpreadsheetGUIexeShoListItem, new Point(22, 24));

            // Type '{Enter}' in 'SpreadsheetGUI.exe - Shortcut' list item
            Keyboard.SendKeys(uISpreadsheetGUIexeShoListItem, this.AddParams.UISpreadsheetGUIexeShoListItemSendKeys, ModifierKeys.None);

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(36, 17));

            // Type '1' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.AddParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.AddParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(75, 52));

            // Type '2' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.AddParams.UIContentsBoxEditText1;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.AddParams.UIContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(137, 40));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(43, 78));

            // Type '=A1+A2' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.AddParams.UIContentsBoxEditText2;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.AddParams.UIContentsBoxEditSendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// CheckA3 - Use 'CheckA3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckA3()
        {
            #region Variable Declarations
            WinEdit uIValueBoxEdit = this.UIForm1Window.UIValueBoxWindow.UIValueBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'valueBox' text box equals '3'
            Assert.AreEqual(this.CheckA3ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);
        }
        
        #region Properties
        public virtual AddParams AddParams
        {
            get
            {
                if ((this.mAddParams == null))
                {
                    this.mAddParams = new AddParams();
                }
                return this.mAddParams;
            }
        }
        
        public virtual CheckA3ExpectedValues CheckA3ExpectedValues
        {
            get
            {
                if ((this.mCheckA3ExpectedValues == null))
                {
                    this.mCheckA3ExpectedValues = new CheckA3ExpectedValues();
                }
                return this.mCheckA3ExpectedValues;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        #endregion
        
        #region Fields
        private AddParams mAddParams;
        
        private CheckA3ExpectedValues mCheckA3ExpectedValues;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UIForm1Window mUIForm1Window;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Add'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AddParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Enter}' in 'SpreadsheetGUI.exe - Shortcut' list item
        /// </summary>
        public string UISpreadsheetGUIexeShoListItemSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '1' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+A2' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText2 = "=A1+A2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckA3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class CheckA3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'valueBox' text box equals '3'
        /// </summary>
        public string UIValueBoxEditText = "3";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIexeShoListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIexeShoListItem == null))
                {
                    this.mUISpreadsheetGUIexeShoListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIexeShoListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI.exe - Shortcut";
                    this.mUISpreadsheetGUIexeShoListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIexeShoListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIexeShoListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIContentsBoxWindow UIContentsBoxWindow
        {
            get
            {
                if ((this.mUIContentsBoxWindow == null))
                {
                    this.mUIContentsBoxWindow = new UIContentsBoxWindow(this);
                }
                return this.mUIContentsBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIValueBoxWindow UIValueBoxWindow
        {
            get
            {
                if ((this.mUIValueBoxWindow == null))
                {
                    this.mUIValueBoxWindow = new UIValueBoxWindow(this);
                }
                return this.mUIValueBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIContentsBoxWindow mUIContentsBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIValueBoxWindow mUIValueBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIContentsBoxWindow : WinWindow
    {
        
        public UIContentsBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentsBox";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsBoxEdit
        {
            get
            {
                if ((this.mUIContentsBoxEdit == null))
                {
                    this.mUIContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Contents";
                    this.mUIContentsBoxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanelClient
        {
            get
            {
                if ((this.mUISpreadsheetPanelClient == null))
                {
                    this.mUISpreadsheetPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanelClient.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIValueBoxWindow : WinWindow
    {
        
        public UIValueBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "valueBox";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueBoxEdit
        {
            get
            {
                if ((this.mUIValueBoxEdit == null))
                {
                    this.mUIValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value";
                    this.mUIValueBoxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueBoxEdit;
        #endregion
    }
}
