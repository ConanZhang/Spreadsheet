// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace GUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Checks that 1+2 =3
        /// </summary>
        public void AdditionAssert1()
        {
            #region Variable Declarations
            WinEdit uIValueBoxEdit = this.UIForm1Window.UIValueBoxWindow.UIValueBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'valueBox' text box equals '3'
            Assert.AreEqual(this.AdditionAssert1ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text, "1+2 failed to equal 3");
        }
        
        /// <summary>
        /// AdditionClosing1
        /// </summary>
        public void AdditionClosing1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            WinButton uINOButton = this.UISpreadsheetWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(34, 14));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(61, 6));
        }
        
        /// <summary>
        /// Set up 1+2 =3
        /// </summary>
        public void AdditionSetup1()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIexeShoListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIexeShoListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uIContentsBoxEdit = this.UIForm1Window.UIContentsBoxWindow.UIContentsBoxEdit;
            WinClient uISpreadsheetPanelClient = this.UIForm1Window.UIItemWindow.UISpreadsheetPanelClient;
            #endregion

            //open relative path of executable for GUI
            ApplicationUnderTest uITipCalculatorWindow = ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Type '1' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.AdditionSetup1Params.UIContentsBoxEditText;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.AdditionSetup1Params.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Type '2' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.AdditionSetup1Params.UIContentsBoxEditText1;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.AdditionSetup1Params.UIContentsBoxEditSendKeys1, ModifierKeys.None);

            // Type '=A1+A2' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.AdditionSetup1Params.UIContentsBoxEditText2;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.AdditionSetup1Params.UIContentsBoxEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(46, 86));
        }
        
        /// <summary>
        /// Sets up circular exception
        /// </summary>
        public void CircularSetup1()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIexeShoListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIexeShoListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uIContentsBoxEdit = this.UIForm1Window.UIContentsBoxWindow.UIContentsBoxEdit;
            WinClient uISpreadsheetPanelClient = this.UIForm1Window.UIItemWindow.UISpreadsheetPanelClient;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            //open relative path of executable for GUI
            ApplicationUnderTest uITipCalculatorWindow = ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Type '1' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.CircularSetup1Params.UIContentsBoxEditText;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.CircularSetup1Params.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Type '2' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.CircularSetup1Params.UIContentsBoxEditText1;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.CircularSetup1Params.UIContentsBoxEditSendKeys1, ModifierKeys.None);

            // Type '=A1' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.CircularSetup1Params.UIContentsBoxEditText2;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.CircularSetup1Params.UIContentsBoxEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(64, 41));

            // Type '=A3' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.CircularSetup1Params.UIContentsBoxEditText3;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.CircularSetup1Params.UIContentsBoxEditSendKeys3, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(32, 20));
        }
        
        /// <summary>
        /// Saves a file with a circular exception.
        /// </summary>
        public void SaveCircular1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            WinButton uIYesButton = this.UISpreadsheetWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 4));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(74, 17));

            // Select 'circular.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveCircular1Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(47, 9));
        }
        
        /// <summary>
        /// Tested make new spreadsheet, saving one, opening one, and closing one.
        /// </summary>
        public void NewOpenSaveClose1()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIexeShoListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIexeShoListItem;
            WinControl uIOpenFileSecurityWarnDialog = this.UIOpenFileSecurityWarnWindow.UIOpenFileSecurityWarnDialog;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinMenuItem uINewMenuItem = this.UIForm1Window.UIMenuMenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uICloseMenuItem = this.UIForm1Window1.UIMenuMenuBar.UIFileMenuItem.UICloseMenuItem;
            WinEdit uIContentsBoxEdit = this.UIForm1Window.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuItem uISaveMenuItem = this.UIForm1Window.UIMenuMenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinMenuItem uIOpenMenuItem = this.UIForm1Window1.UIMenuMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilenameComboBox1 = this.UIOpenWindow.UIItemWindow1.UIFilenameComboBox;
            WinButton uIOpenButton1 = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WinClient uISpreadsheetPanelClient = this.UIForm1Window1.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uIContentsBoxEdit1 = this.UIForm1Window1.UIContentsBoxWindow.UIContentsBoxEdit;
            WinButton uICloseButton = this.UIForm1Window1.UIForm1TitleBar.UICloseButton;
            WinButton uINOButton = this.UISpreadsheetWindow.UINOWindow.UINOButton;
            WinButton uICloseButton1 = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            #endregion

            //open relative path of executable for GUI
            ApplicationUnderTest uITipCalculatorWindow = ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(29, 7));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(43, 4));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(36, 8));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(59, 17));

            // Type 'Testing' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.NewOpenSaveClose1Params.UIContentsBoxEditText;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.NewOpenSaveClose1Params.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Type 'Save' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.NewOpenSaveClose1Params.UIContentsBoxEditText1;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.NewOpenSaveClose1Params.UIContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(59, 11));

            // Select 'testingSave' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.NewOpenSaveClose1Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(23, 6));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(37, 3));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(39, 7));

            // Select 'testingSave.sprd' in 'File name:' combo box
            uIFilenameComboBox1.EditableItem = this.NewOpenSaveClose1Params.UIFilenameComboBoxEditableItem1;

            // Click '&Open' button
            Mouse.Click(uIOpenButton1, new Point(34, 7));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(123, 34));

            // Type 'Testing' in 'contentsBox' text box
            uIContentsBoxEdit1.Text = this.NewOpenSaveClose1Params.UIContentsBoxEditText2;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit1, this.NewOpenSaveClose1Params.UIContentsBoxEditSendKeys2, ModifierKeys.None);

            // Type 'Close' in 'contentsBox' text box
            uIContentsBoxEdit1.Text = this.NewOpenSaveClose1Params.UIContentsBoxEditText3;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit1, this.NewOpenSaveClose1Params.UIContentsBoxEditSendKeys3, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(35, 4));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(53, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(18, 8));
        }
        
        /// <summary>
        /// Set up formula exception for invalid name.
        /// </summary>
        public void FormulaExceptionSetUp1()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIexeShoListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIexeShoListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uIContentsBoxEdit = this.UIForm1Window.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            //open relative path of executable for GUI
            ApplicationUnderTest uITipCalculatorWindow = ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Type '1' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.FormulaExceptionSetUp1Params.UIContentsBoxEditText;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.FormulaExceptionSetUp1Params.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Type '2' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.FormulaExceptionSetUp1Params.UIContentsBoxEditText1;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.FormulaExceptionSetUp1Params.UIContentsBoxEditSendKeys1, ModifierKeys.None);

            // Type '=A1+A2+TestingFormulaInvalidName' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.FormulaExceptionSetUp1Params.UIContentsBoxEditText2;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.FormulaExceptionSetUp1Params.UIContentsBoxEditSendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// Move to exception cell.
        /// </summary>
        public void FormulaExceptionMove1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UIForm1Window.UIItemWindow.UISpreadsheetPanelClient;
            #endregion

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(86, 79));
        }
        
        /// <summary>
        /// Check if invalid name is error.
        /// </summary>
        public void FormulaExceptionAssertion1()
        {
            #region Variable Declarations
            WinEdit uIValueBoxEdit = this.UIForm1Window.UIValueBoxWindow.UIValueBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'valueBox' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.FormulaExceptionAssertion1ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text, "Invalid name didn\'t cause formula error.");
        }
        
        /// <summary>
        /// Did incorrect formula formatting.
        /// </summary>
        public void FormulaExceptionSetUp2()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UIForm1Window.UIContentsBoxWindow.UIContentsBoxEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinClient uISpreadsheetPanelClient = this.UIForm1Window.UIItemWindow.UISpreadsheetPanelClient;
            #endregion

            // Type '=1239kb231'90[123-12]3*123809' in 'contentsBox' text box
            uIContentsBoxEdit.Text = this.FormulaExceptionSetUp2Params.UIContentsBoxEditText;

            // Type '{Enter}' in 'contentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.FormulaExceptionSetUp2Params.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(54, 11));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(59, 78));
        }
        
        /// <summary>
        /// Incorrect formatting for formula is still error.
        /// </summary>
        public void FormulaExceptionAssertion2()
        {
            #region Variable Declarations
            WinEdit uIValueBoxEdit = this.UIForm1Window.UIValueBoxWindow.UIValueBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'valueBox' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.FormulaExceptionAssertion2ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text, "Incorrect formatting is still error.");
        }
        
        /// <summary>
        /// Closes formula test.
        /// </summary>
        public void FormulaExceptionClosing1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            WinButton uINOButton = this.UISpreadsheetWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(14, 2));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(60, 15));
        }
        
        #region Properties
        public virtual AdditionAssert1ExpectedValues AdditionAssert1ExpectedValues
        {
            get
            {
                if ((this.mAdditionAssert1ExpectedValues == null))
                {
                    this.mAdditionAssert1ExpectedValues = new AdditionAssert1ExpectedValues();
                }
                return this.mAdditionAssert1ExpectedValues;
            }
        }
        
        public virtual AdditionSetup1Params AdditionSetup1Params
        {
            get
            {
                if ((this.mAdditionSetup1Params == null))
                {
                    this.mAdditionSetup1Params = new AdditionSetup1Params();
                }
                return this.mAdditionSetup1Params;
            }
        }
        
        public virtual CircularSetup1Params CircularSetup1Params
        {
            get
            {
                if ((this.mCircularSetup1Params == null))
                {
                    this.mCircularSetup1Params = new CircularSetup1Params();
                }
                return this.mCircularSetup1Params;
            }
        }
        
        public virtual SaveCircular1Params SaveCircular1Params
        {
            get
            {
                if ((this.mSaveCircular1Params == null))
                {
                    this.mSaveCircular1Params = new SaveCircular1Params();
                }
                return this.mSaveCircular1Params;
            }
        }
        
        public virtual NewOpenSaveClose1Params NewOpenSaveClose1Params
        {
            get
            {
                if ((this.mNewOpenSaveClose1Params == null))
                {
                    this.mNewOpenSaveClose1Params = new NewOpenSaveClose1Params();
                }
                return this.mNewOpenSaveClose1Params;
            }
        }
        
        public virtual FormulaExceptionSetUp1Params FormulaExceptionSetUp1Params
        {
            get
            {
                if ((this.mFormulaExceptionSetUp1Params == null))
                {
                    this.mFormulaExceptionSetUp1Params = new FormulaExceptionSetUp1Params();
                }
                return this.mFormulaExceptionSetUp1Params;
            }
        }
        
        public virtual FormulaExceptionAssertion1ExpectedValues FormulaExceptionAssertion1ExpectedValues
        {
            get
            {
                if ((this.mFormulaExceptionAssertion1ExpectedValues == null))
                {
                    this.mFormulaExceptionAssertion1ExpectedValues = new FormulaExceptionAssertion1ExpectedValues();
                }
                return this.mFormulaExceptionAssertion1ExpectedValues;
            }
        }
        
        public virtual FormulaExceptionSetUp2Params FormulaExceptionSetUp2Params
        {
            get
            {
                if ((this.mFormulaExceptionSetUp2Params == null))
                {
                    this.mFormulaExceptionSetUp2Params = new FormulaExceptionSetUp2Params();
                }
                return this.mFormulaExceptionSetUp2Params;
            }
        }
        
        public virtual FormulaExceptionAssertion2ExpectedValues FormulaExceptionAssertion2ExpectedValues
        {
            get
            {
                if ((this.mFormulaExceptionAssertion2ExpectedValues == null))
                {
                    this.mFormulaExceptionAssertion2ExpectedValues = new FormulaExceptionAssertion2ExpectedValues();
                }
                return this.mFormulaExceptionAssertion2ExpectedValues;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UIForm1Window1 UIForm1Window1
        {
            get
            {
                if ((this.mUIForm1Window1 == null))
                {
                    this.mUIForm1Window1 = new UIForm1Window1();
                }
                return this.mUIForm1Window1;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIOpenWindow2 UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow2();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private AdditionAssert1ExpectedValues mAdditionAssert1ExpectedValues;
        
        private AdditionSetup1Params mAdditionSetup1Params;
        
        private CircularSetup1Params mCircularSetup1Params;
        
        private SaveCircular1Params mSaveCircular1Params;
        
        private NewOpenSaveClose1Params mNewOpenSaveClose1Params;
        
        private FormulaExceptionSetUp1Params mFormulaExceptionSetUp1Params;
        
        private FormulaExceptionAssertion1ExpectedValues mFormulaExceptionAssertion1ExpectedValues;
        
        private FormulaExceptionSetUp2Params mFormulaExceptionSetUp2Params;
        
        private FormulaExceptionAssertion2ExpectedValues mFormulaExceptionAssertion2ExpectedValues;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UIForm1Window mUIForm1Window;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UIForm1Window1 mUIForm1Window1;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIOpenWindow2 mUIOpenWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AdditionAssert1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AdditionAssert1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'valueBox' text box equals '3'
        /// </summary>
        public string UIValueBoxEditText = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AdditionSetup1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AdditionSetup1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+A2' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText2 = "=A1+A2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularSetup1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class CircularSetup1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText2 = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=A3' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText3 = "=A3";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveCircular1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class SaveCircular1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'circular.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "circular.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NewOpenSaveClose1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class NewOpenSaveClose1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Testing' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Testing";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Save' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText1 = "Save";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Select 'testingSave' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testingSave";
        
        /// <summary>
        /// Select 'testingSave.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "testingSave.sprd";
        
        /// <summary>
        /// Type 'Testing' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText2 = "Testing";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'Close' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText3 = "Close";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaExceptionSetUp1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class FormulaExceptionSetUp1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+A2+TestingFormulaInvalidName' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText2 = "=A1+A2+TestingFormulaInvalidName";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaExceptionAssertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class FormulaExceptionAssertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'valueBox' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UIValueBoxEditText = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaExceptionSetUp2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class FormulaExceptionSetUp2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=1239kb231'90[123-12]3*123809' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "=1239kb231\'90[123-12]3*123809";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaExceptionAssertion2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class FormulaExceptionAssertion2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'valueBox' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UIValueBoxEditText = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIexeShoListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIexeShoListItem == null))
                {
                    this.mUISpreadsheetGUIexeShoListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIexeShoListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI.exe - Shortcut";
                    this.mUISpreadsheetGUIexeShoListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIexeShoListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIexeShoListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new WinList(this);
                    #region Search Criteria
                    this.mUIDesktopList.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopList.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        
        public WinControl UIOpenFileSecurityWarnDialog
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnDialog == null))
                {
                    this.mUIOpenFileSecurityWarnDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIOpenFileSecurityWarnDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Open File - Security Warning";
                    this.mUIOpenFileSecurityWarnDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIOpenFileSecurityWarnDialog.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenFileSecurityWarnDialog;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        
        private WinControl mUIOpenFileSecurityWarnDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIContentsBoxWindow UIContentsBoxWindow
        {
            get
            {
                if ((this.mUIContentsBoxWindow == null))
                {
                    this.mUIContentsBoxWindow = new UIContentsBoxWindow(this);
                }
                return this.mUIContentsBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIValueBoxWindow UIValueBoxWindow
        {
            get
            {
                if ((this.mUIValueBoxWindow == null))
                {
                    this.mUIValueBoxWindow = new UIValueBoxWindow(this);
                }
                return this.mUIValueBoxWindow;
            }
        }
        
        public UIForm1TitleBar UIForm1TitleBar
        {
            get
            {
                if ((this.mUIForm1TitleBar == null))
                {
                    this.mUIForm1TitleBar = new UIForm1TitleBar(this);
                }
                return this.mUIForm1TitleBar;
            }
        }
        
        public UIMenuMenuBar UIMenuMenuBar
        {
            get
            {
                if ((this.mUIMenuMenuBar == null))
                {
                    this.mUIMenuMenuBar = new UIMenuMenuBar(this);
                }
                return this.mUIMenuMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIContentsBoxWindow mUIContentsBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIValueBoxWindow mUIValueBoxWindow;
        
        private UIForm1TitleBar mUIForm1TitleBar;
        
        private UIMenuMenuBar mUIMenuMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIContentsBoxWindow : WinWindow
    {
        
        public UIContentsBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentsBox";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsBoxEdit
        {
            get
            {
                if ((this.mUIContentsBoxEdit == null))
                {
                    this.mUIContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Contents";
                    this.mUIContentsBoxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanelClient
        {
            get
            {
                if ((this.mUISpreadsheetPanelClient == null))
                {
                    this.mUISpreadsheetPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanelClient.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIValueBoxWindow : WinWindow
    {
        
        public UIValueBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "valueBox";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueBoxEdit
        {
            get
            {
                if ((this.mUIValueBoxEdit == null))
                {
                    this.mUIValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value";
                    this.mUIValueBoxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIForm1TitleBar : WinTitleBar
    {
        
        public UIForm1TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuMenuBar : WinMenuBar
    {
        
        public UIMenuMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        
        private UICancelWindow mUICancelWindow;
        
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIForm1Window1 : WinWindow
    {
        
        public UIForm1Window1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIMenuMenuBar1 UIMenuMenuBar
        {
            get
            {
                if ((this.mUIMenuMenuBar == null))
                {
                    this.mUIMenuMenuBar = new UIMenuMenuBar1(this);
                }
                return this.mUIMenuMenuBar;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIContentsBoxWindow1 UIContentsBoxWindow
        {
            get
            {
                if ((this.mUIContentsBoxWindow == null))
                {
                    this.mUIContentsBoxWindow = new UIContentsBoxWindow1(this);
                }
                return this.mUIContentsBoxWindow;
            }
        }
        
        public UIForm1TitleBar1 UIForm1TitleBar
        {
            get
            {
                if ((this.mUIForm1TitleBar == null))
                {
                    this.mUIForm1TitleBar = new UIForm1TitleBar1(this);
                }
                return this.mUIForm1TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuMenuBar1 mUIMenuMenuBar;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIContentsBoxWindow1 mUIContentsBoxWindow;
        
        private UIForm1TitleBar1 mUIForm1TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuMenuBar1 : WinMenuBar
    {
        
        public UIMenuMenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanelClient
        {
            get
            {
                if ((this.mUISpreadsheetPanelClient == null))
                {
                    this.mUISpreadsheetPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanelClient.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIContentsBoxWindow1 : WinWindow
    {
        
        public UIContentsBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentsBox";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsBoxEdit
        {
            get
            {
                if ((this.mUIContentsBoxEdit == null))
                {
                    this.mUIContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Contents";
                    this.mUIContentsBoxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIForm1TitleBar1 : WinTitleBar
    {
        
        public UIForm1TitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        #endregion
        
        #region Fields
        private UISaveWindow mUISaveWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow2 : WinWindow
    {
        
        public UIOpenWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIPs6sprdListItem UIPs6sprdListItem
        {
            get
            {
                if ((this.mUIPs6sprdListItem == null))
                {
                    this.mUIPs6sprdListItem = new UIPs6sprdListItem(this);
                }
                return this.mUIPs6sprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPs6sprdListItem mUIPs6sprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIPs6sprdListItem : WinListItem
    {
        
        public UIPs6sprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "ps6.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
